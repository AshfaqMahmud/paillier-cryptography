# -*- coding: utf-8 -*-
"""modification using paillier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XHEIZCx0k9m75IioWEuZ7x9mt_pll4vr
"""

from phe import paillier

def key_generation():
    public_key, private_key = paillier.generate_paillier_keypair()
    return public_key, private_key

# Generate keys for COH1 and COH2
public_key1, private_key1 = key_generation()
public_key2, private_key2 = key_generation()

print("Public Key 1:", public_key1)
print("Private Key 1:", private_key1)
print("Public Key 2:", public_key2)
print("Private Key 2:", private_key2)

def encrypt(public_key, dataset):
    encrypted_data = [public_key.encrypt(x) for x in dataset]
    return encrypted_data

# Example dataset
dataset = [10, 20, 30, 40]

# Encrypt dataset using public keys of COH1 and COH2
encrypted_dataset1 = encrypt(public_key1, dataset)
encrypted_dataset2 = encrypt(public_key2, dataset)

print("Encrypted Dataset 1:", encrypted_dataset1)
print("Encrypted Dataset 2:", encrypted_dataset2)

def decrypt(private_key, encrypted_dataset):
    decrypted_data = [private_key.decrypt(x) for x in encrypted_dataset]
    return decrypted_data

def re_encrypt(public_key, dataset):
    re_encrypted_data = [public_key.encrypt(x) for x in dataset]
    return re_encrypted_data

def fisher_yates_shuffle(arr):
    import random
    n = len(arr)
    for i in range(n-1, 0, -1):
        j = random.randint(0, i)
        arr[i], arr[j] = arr[j], arr[i]
    return arr

# First, decrypt the datasets using the private key of COH1
decrypted_dataset1 = decrypt(private_key1, encrypted_dataset1)
decrypted_dataset2 = decrypt(private_key2, encrypted_dataset2)

# Then, re-encrypt the datasets using the public keys of COH2
re_encrypted_dataset1 = re_encrypt(public_key2, decrypted_dataset1)
re_encrypted_dataset2 = re_encrypt(public_key1, decrypted_dataset2)

# Shuffle the re-encrypted datasets
shuffled_dataset1 = fisher_yates_shuffle(re_encrypted_dataset1)
shuffled_dataset2 = fisher_yates_shuffle(re_encrypted_dataset2)

print("Shuffled Dataset 1:", shuffled_dataset1)
print("Shuffled Dataset 2:", shuffled_dataset2)

def decrypt(private_key, encrypted_dataset):
    decrypted_data = [private_key.decrypt(x) for x in encrypted_dataset]
    return decrypted_data

# Decrypt the shuffled datasets
decrypted_shuffled_dataset1 = decrypt(private_key2, shuffled_dataset1)
decrypted_shuffled_dataset2 = decrypt(private_key1, shuffled_dataset2)

print("Decrypted Shuffled Dataset 1:", decrypted_shuffled_dataset1)
print("Decrypted Shuffled Dataset 2:", decrypted_shuffled_dataset2)